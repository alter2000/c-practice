Hi Alec,

As for the code style, I think it's best to keep my variables as short as possible, but with comments if they're not self-explanatory (except for single-lettered counters). There was this discussion on Stack Overflow a while back on making many small functions over one main() wall of text.

The &/% example: 3 % 2 == 1 == 3 & (2-1)
3 is 11
2 is 10
Since & uses the smallest values from a given pair, the remainder should be 2, but it's not. It's the right part that's the remainder /most of the time, when dividing by positive powers of 2/ (or so I've seen).

> How much memory did the strings use?
Since a string is a char array, it should need as many bytes as it has elements (including the null byte), so each string takes up 1 more byte than its character length. From what I've read, this only applies to ASCIIZ.

> Can you show me these operators in action: *=, --, !, &&, ==, and ?
I found uses for most, except the conditional operator (which could shorten the /if/ mess on the /wc/ copy, but I found it much more legible when I had brackets in place) and && (which could be used instead of isspace(c) in wc).

These days we have some national holidays I'm going to use to complete/prepare projects for January and May, so that I won't have to pull all-nighters every 3 days when the due dates come, and to redesign part of the website's backend for better load times and Deezer playlist support, so I don't think I'll be as productive as this time.
The olympiad results came in today, and it seems I can go on with physics, biology and CS. They won't be much of a problem until January,

Here's the homework, and BTW, since I'm not using any C++ anymore, is it okay if I leave the extensions as C? The /wc/ clone was a really fun excercise, but I don't understand why the loop won't stop at the null terminator and will print gibberish until the end of the array. I could use getline as an alternative, but that would store an entire line in memory (a whole file with a single line), or fread, which does basically the same thing as fgets in this case. As for the recursive function, I am sure I have lost something along the way, and inlining it didn't really help (takes about 0.2sec more for n=40), probably because it calls itself with bigger values more than what would be gained.
